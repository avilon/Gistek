<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2015 sp2 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:map="http://www.w3.org/2005/xpath-functions/map" xmlns:math="http://www.w3.org/2005/xpath-functions/math" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="#all">
	<xsl:output version="4.0" method="html" indent="no" encoding="UTF-8" use-character-maps="spaces" doctype-public="-//W3C//DTD HTML 4.01 Transitional//EN" doctype-system="http://www.w3.org/TR/html4/loose.dtd"/>
	<xsl:character-map name="spaces">
		<xsl:output-character character="&#160;" string="&amp;nbsp;"/>
	</xsl:character-map>
	<xsl:param name="altova:bGeneratingFromPxf" select="false()"/>
	<xsl:param name="SV_OutputFormat" select="'HTML'"/>
	<xsl:param name="SV_BaseOutputFileName" as="xs:string?">
		<xsl:sequence select="for $i in altovaext:get-base-output-uri(), $j in tokenize( $i, &apos;[/\\]&apos; )[last()] return replace( $j, &apos;\.[^\.\s#%;]*$&apos;, &apos;&apos; )" use-when="function-available(&apos;altovaext:get-base-output-uri&apos;)"/>
	</xsl:param>
	<xsl:param name="SV_GeneratedFileNamePrefix" select="if ( $SV_BaseOutputFileName ) then $SV_BaseOutputFileName else &apos;__Altova__&apos;" as="xs:string?"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:import-schema schema-location="70125.xsd" use-when="system-property('xsl:is-schema-aware')='yes'"/>
	<xsl:variable name="altova:CssImages" select="()"/>
	<xsl:variable name="altova:DesignAfterStep1">
		<altova:main-document url="{if ($SV_BaseOutputFileName) then concat($SV_BaseOutputFileName,'.html') else ''}">
			<html>
				<head>
					<title/>
					<meta name="generator" content="Altova StyleVision Enterprise Edition 2015 sp2 (http://www.altova.com)"/>
					<meta http-equiv="X-UA-Compatible" content="IE=9"/>
					<xsl:comment>[if IE]&gt;&lt;STYLE type=&quot;text/css&quot;&gt;.altova-rotate-left-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)} .altova-rotate-right-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1)} &lt;/STYLE&gt;&lt;![endif]</xsl:comment>
					<xsl:comment>[if !IE]&gt;&lt;!</xsl:comment>
					<style type="text/css">.altova-rotate-left-textbox{-webkit-transform: rotate(-90deg) translate(-100%, 0%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(-90deg) translate(-100%, 0%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(-90deg) translate(-100%, 0%); -ms-transform-origin: 0% 0%;}.altova-rotate-right-textbox{-webkit-transform: rotate(90deg) translate(0%, -100%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(90deg) translate(0%, -100%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(90deg) translate(0%, -100%); -ms-transform-origin: 0% 0%;}</style>
					<xsl:comment>&lt;![endif]</xsl:comment>
				<style type="text/css">
					<xsl:value-of select="document('style.css')" disable-output-escaping="yes" />
				</style>
					<style type="text/css">@page { margin-left:0.60in; margin-right:0.60in; margin-top:0.79in; margin-bottom:0.79in } @media print { br.altova-page-break { page-break-before: always; } }</style>
				</head>
				<body>
					<span style="font-size:16pt; ">
						<xsl:text>Отчет о достижении целевых и прочих показателей программы энергосбережения и повышения энергетической эффективности организаций, осуществляющих регулируемые виды деятельности</xsl:text>
					</span>
					<br/>
					<hr/>
					<span>
						<xsl:text>Раздел  1 Сведения о достижении целевых показателей программы энергосбережения и повышения энергетической эффективности организаций, осуществляющих регулируемые виды деятельности</xsl:text>
					</span>
					<br/>
					<table border="1">
						<xsl:variable name="altova:CurrContextGrid_0" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<thead>
							<tr>
								<th>
									<span>
										<xsl:text>Наименование целевого показателя программы</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Код строки</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Ед. изм.</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Среднее значение показателя по отрасли</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Лучшее мировое значение показателя по отрасли</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Значение показателя за базовый год</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Плановое значение показателя за год t - 4 </xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Плановое значение показателя за год t - 3</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Плановое значение показателя за год t - 2</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Плановое значение показателя за год t - 1</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Плановое значение показателя за отчетный год t</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Плановое значение показателя за год t +1</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Плановое значение показателя за год t + 2</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Плановое значение показателя за год t + 3</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Плановое значение показателя за год t + 4</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Фактическое значение показателя за год t - 4 </xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Фактическое значение показателя за год t - 3</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Фактическое значение показателя за год t - 2</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Фактическое значение показателя за год t - 1</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Фактическое значение показателя за отчетный год t</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Фактическое значение показателя за год t +1</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Фактическое значение показателя за год t + 2</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Фактическое значение показателя за год t + 3</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Фактическое значение показателя за год t + 4</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение абсолютное за год t - 4</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>column23</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение абсолютное за год t - 3</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение абсолютное за год t - 2</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение абсолютное за год t - 1</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение абсолютное за отчетный год t </xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение абсолютное за год t + 1</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение абсолютное за год t + 2</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение абсолютное за год t + 3</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение абсолютное за год t + 4</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение за год t - 4, %</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение за год t - 3, %</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение за год t - 2, %</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение за год t - 1, %</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение за отчетный год t, %</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение за год t + 1, %</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение за год t + 2, %</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение за год t + 3, %</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение за год t + 4, %</xsl:text>
									</span>
									<br/>
								</th>
							</tr>
							<tr>
								<th>
									<span>
										<xsl:text>А</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Б</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр1</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр2</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр3</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр4</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр5</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр6</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр7</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр8</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр9</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр10</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр11</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр12</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр13</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр14</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр15</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр16</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр17</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр18</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр19</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр20</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр21</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр22</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр23</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр24</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр25</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр26</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр27</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр28</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр29</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр30</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр31</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр32</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр33</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр34</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр35</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр36</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр37</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр38</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр39</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр40</xsl:text>
									</span>
								</th>
							</tr>
						</thead>
						<tbody>
							<xsl:for-each select="$XML">
								<xsl:for-each select="document">
									<xsl:for-each select="flat">
										<xsl:for-each select="strdata_01">
											<tr>
												<td>
													<xsl:for-each select="@name">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@code">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column2">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column3">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column4">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column5">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column6">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column7">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column8">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column9">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column10">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column11">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column12">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column13">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column14">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column15">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column16">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column17">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column18">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column19">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column20">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column21">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column22">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column23">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column24">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column25">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column26">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column27">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column28">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column29">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column30">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column31">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column32">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column33">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column34">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column35">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column36">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column37">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column38">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column39">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column40">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</tbody>
					</table>
					<br/>
					<span>
						<xsl:text>Раздел  2 Сведения о достижении прочих показателей программы энергосбережения и повышения энергетической эффективности организаций, осуществляющих регулируемые виды деятельности</xsl:text>
					</span>
					<br/>
					<table border="1">
						<xsl:variable name="altova:CurrContextGrid_1" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<thead>
							<tr>
								<th>
									<span>
										<xsl:text>Наименование целевого показателя программы</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Код строки</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Ед. изм.</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Среднее значение показателя по отрасли</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Лучшее мировое значение показателя по отрасли</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Значение показателя за базовый год</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Плановое значение показателя за год t - 4 </xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Плановое значение показателя за год t - 3	</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Плановое значение показателя за год t - 2</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Плановое значение показателя за год t - 1</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Плановое значение показателя за отчетный год t</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Плановое значение показателя за год t +1</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Плановое значение показателя за год t + 2</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Плановое значение показателя за год t + 3</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Плановое значение показателя за год t + 4</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Фактическое значение показателя за год t - 4 </xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Фактическое значение показателя за год t - 3</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Фактическое значение показателя за год t - 2</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Фактическое значение показателя за год t - 1</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Фактическое значение показателя за отчетный год t</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Фактическое значение показателя за год t +1</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Фактическое значение показателя за год t + 2</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Фактическое значение показателя за год t + 3</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Фактическое значение показателя за год t + 4</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение абсолютное за год t - 4</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение абсолютное за год t - 3</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение абсолютное за год t - 2</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение абсолютное за год t - 1</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение абсолютное за отчетный год t </xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение абсолютное за год t + 1</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение абсолютное за год t + 2</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение абсолютное за год t + 3</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение абсолютное за год t + 4</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение за год t - 4, %</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение за год t - 3, %</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение за год t - 2, %</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение за год t - 1, %</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение за отчетный год t, %</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение за год t + 1, %</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение за год t + 2, %</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение за год t + 3, %</xsl:text>
									</span>
									<br/>
								</th>
								<th>
									<span>
										<xsl:text>Отклонение за год t + 4, %</xsl:text>
									</span>
									<br/>
								</th>
							</tr>
							<tr>
								<th>
									<span>
										<xsl:text>А</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Б</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр1</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр2</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр3</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр4</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр5</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр6</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр7</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр8</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр9</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр10</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр11</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр12</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр13</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр14</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр15</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр16</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр17</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр18</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр19</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр20</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр21</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр22</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр23</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр24</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр25</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр26</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр27</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр28</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр29</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр30</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр31</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр32</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр33</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр34</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр35</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр36</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр37</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр38</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр39</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Гр40</xsl:text>
									</span>
								</th>
							</tr>
						</thead>
						<tbody>
							<xsl:for-each select="$XML">
								<xsl:for-each select="document">
									<xsl:for-each select="flat">
										<xsl:for-each select="strdata_02">
											<tr>
												<td>
													<xsl:for-each select="@name">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@code">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column2">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column3">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column4">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column5">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column6">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column7">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column8">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column9">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column10">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column11">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column12">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column13">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column14">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column15">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column16">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column17">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column18">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column19">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column20">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column21">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column22">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column23">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column24">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column25">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column26">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column27">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column28">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column29">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column30">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column31">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column32">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column33">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column34">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column35">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column36">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column37">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column38">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column39">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column40">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</tbody>
					</table>
					<br/>
					<span style="font-size:16pt; ">
						<xsl:text>Служебный раздел</xsl:text>
					</span>
					<br/>
					<hr/>
					<span>
						<xsl:text>Сведения о Субъекте ТЭК, предоставившем информацию</xsl:text>
					</span>
					<br/>
					<table border="1">
						<xsl:variable name="altova:CurrContextGrid_2" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<thead>
							<tr>
								<th>
									<span>
										<xsl:text>Служебная информация</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Значение 1</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Значение 2</xsl:text>
									</span>
								</th>
							</tr>
						</thead>
						<tbody>
							<xsl:for-each select="$XML">
								<xsl:for-each select="document">
									<xsl:for-each select="flat">
										<xsl:for-each select="strServiceInf">
											<tr>
												<td>
													<xsl:for-each select="@name">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@code">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@col1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</tbody>
					</table>
					<br/>
					<span>
						<xsl:text>Контактная информация</xsl:text>
					</span>
					<br/>
					<table border="1">
						<xsl:variable name="altova:CurrContextGrid_3" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<thead>
							<tr>
								<th rowspan="2">
									<span>
										<xsl:text>Контактная иформация</xsl:text>
									</span>
								</th>
								<th rowspan="2">
									<span>
										<xsl:text>Код</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>строки</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Ф.И.О.</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Должность</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Контактный телефон (с кодом города)</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Электронный адрес</xsl:text>
									</span>
								</th>
							</tr>
							<tr>
								<th>
									<span>
										<xsl:text>1</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>2</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>3</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>4</xsl:text>
									</span>
								</th>
							</tr>
						</thead>
						<tbody>
							<xsl:for-each select="$XML">
								<xsl:for-each select="document">
									<xsl:for-each select="flat">
										<xsl:for-each select="strContactInf">
											<tr>
												<td>
													<xsl:for-each select="@name">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@code">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@col1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@col2">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@col3">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@col4">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</tbody>
					</table>
					<br/>
					<br/>
					<span>
						<xsl:text> «____» ___________20_ год</xsl:text>
					</span>
					<br/>
					<span>
						<xsl:text>(дата предоставления </xsl:text>
					</span>
					<br/>
					<span>
						<xsl:text>информации в </xsl:text>
					</span>
					<br/>
					<span>
						<xsl:text>государственную </xsl:text>
					</span>
					<br/>
					<span>
						<xsl:text>информационную систему </xsl:text>
					</span>
					<br/>
					<span>
						<xsl:text>топливно-энергетического </xsl:text>
					</span>
					<br/>
					<span>
						<xsl:text>комплекса)</xsl:text>
					</span>
					<br/>
					<br/>
				</body>
			</html>
		</altova:main-document>
	</xsl:variable>
	<xsl:template match="/">
		<xsl:for-each select="$altova:DesignAfterStep1">
			<xsl:apply-templates mode="altova:step2"/>
		</xsl:for-each>
		<xsl:if test="$altova:bGeneratingFromPxf">
			<xsl:for-each select="distinct-values(for $i in $altova:DesignAfterStep1//img[not(@altova:ImageDataBase64)]/@src return lower-case($i))">
				<xsl:if test="not(starts-with(., 'http://') or starts-with(., 'ftp://') or starts-with(., 'file:///') or substring(., 2, 2) = ':\' or substring(., 2, 2) = ':/')">
					<xsl:if test="unparsed-text-available(., 'x-binarytobase64')">
						<xsl:result-document href="{.}" method="text" encoding="x-base64tobinary">
							<xsl:value-of select="unparsed-text(., 'x-binarytobase64')"/>
						</xsl:result-document>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<xsl:for-each select="distinct-values(for $i in $altova:toc-xslt-tree//img[not(@altova:ImageDataBase64)]/@src return lower-case($i))">
				<xsl:if test="not(starts-with(., 'http://') or starts-with(., 'ftp://') or starts-with(., 'file:///') or substring(., 2, 2) = ':\' or substring(., 2, 2) = ':/')">
					<xsl:if test="unparsed-text-available(., 'x-binarytobase64')">
						<xsl:result-document href="{.}" method="text" encoding="x-base64tobinary">
							<xsl:value-of select="unparsed-text(., 'x-binarytobase64')"/>
						</xsl:result-document>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<xsl:for-each select="distinct-values(for $i in $altova:CssImages/altova:CssImage/@altova:sUrl return lower-case($i))">
				<xsl:if test="not(starts-with(., 'http://') or starts-with(., 'ftp://') or starts-with(., 'file:///') or substring(., 2, 2) = ':\' or substring(., 2, 2) = ':/')">
					<xsl:if test="unparsed-text-available(., 'x-binarytobase64')">
						<xsl:result-document href="{.}" method="text" encoding="x-base64tobinary">
							<xsl:value-of select="unparsed-text(., 'x-binarytobase64')"/>
						</xsl:result-document>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
		</xsl:if>
	</xsl:template>
	<xsl:template match="@* | node()" mode="altova:step2">
		<xsl:copy copy-namespaces="no">
			<xsl:apply-templates select="@* | node()" mode="#current"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="table" mode="altova:step2">
		<xsl:variable name="altova:table">
			<xsl:copy copy-namespaces="no">
				<xsl:apply-templates select="@* | node()" mode="#current"/>
			</xsl:copy>
		</xsl:variable>
		<xsl:apply-templates select="$altova:table" mode="altova:generate-table"/>
	</xsl:template>
	<xsl:variable name="altova:toc-xslt-tree1">
		<xsl:for-each select="$altova:DesignAfterStep1">
			<xsl:apply-templates mode="altova:generate-toc-xslt-tree"/>
		</xsl:for-each>
	</xsl:variable>
	<xsl:template match="altova:level" mode="altova:generate-toc-xslt-tree">
		<altova:level altova:design-id="{generate-id()}">
			<xsl:apply-templates mode="#current"/>
		</altova:level>
	</xsl:template>
	<xsl:template match="altova:marker" mode="altova:generate-toc-xslt-tree">
		<altova:marker altova:design-id="{generate-id()}" altova:name="{@altova:name}">
			<xsl:apply-templates mode="#current"/>
		</altova:marker>
	</xsl:template>
	<xsl:template match="@* | text()" mode="altova:generate-toc-xslt-tree"/>
	<xsl:template match="altova:UnescapedText" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:copy copy-namespaces="no">
			<xsl:apply-templates mode="#current"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="text()" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="altova:num-lvl" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<xsl:attribute name="altova:level-design-id" select="$altova:level-design-id"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="altova:num-seq" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<xsl:attribute name="altova:marker-design-id" select="generate-id( ancestor::altova:marker[1] )"/>
		</xsl:copy>
	</xsl:template>
	<xsl:variable name="altova:toc-xslt-tree" select="$altova:toc-xslt-tree1"/>
	<xsl:key name="altova:bookmark-key" match="altova:bookmark" use="@name"/>
	<xsl:key name="altova:toc-xslt-tree-key" match="altova:level | altova:toc | altova:ref | altova:marker" use="@altova:design-id"/>
	<xsl:template match="altova:main-document" mode="altova:step2">
		<xsl:apply-templates select="node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:level" mode="altova:step2">
		<xsl:apply-templates select="node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:bookmark | altova:hyperlink" mode="altova:step2">
		<a>
			<xsl:apply-templates select="@* | node()" mode="#current"/>
		</a>
	</xsl:template>
	<xsl:template match="altova:hyperlink/@href[starts-with(.,'#')]" mode="altova:step2">
		<xsl:variable name="altova:bookmark-name" select="substring(.,2)"/>
		<xsl:attribute name="href">
			<xsl:variable name="altova:source-document" select="ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>
			<xsl:variable name="altova:target-document" select="key('altova:bookmark-key',$altova:bookmark-name,$altova:DesignAfterStep1)[1]/ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>
			<xsl:value-of select="concat(altova:calc-relative-path($altova:source-document/@url,$altova:target-document/@url),.)"/>
		</xsl:attribute>
	</xsl:template>
	<xsl:template match="altova:toc | altova:ref" mode="altova:step2">
		<xsl:apply-templates select="$altova:toc-xslt-tree/key( 'altova:toc-xslt-tree-key', generate-id( current() ) )/node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:marker" mode="altova:step2">
		<a name="{generate-id()}"/>
		<xsl:apply-templates select="node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:num-lvl" mode="altova:step2">
		<xsl:variable name="altova:format" select="@altova:format"/>
		<xsl:variable name="altova:omit-levels" select="@altova:omit-levels"/>
		<xsl:variable name="altova:level-design-id">
			<xsl:choose>
				<xsl:when test="@altova:level-design-id">
					<xsl:value-of select="@altova:level-design-id"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="generate-id( ancestor::altova:level[1] )"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:for-each select="$altova:toc-xslt-tree/key( 'altova:toc-xslt-tree-key', $altova:level-design-id )">
			<xsl:choose>
				<xsl:when test="$altova:omit-levels">
					<xsl:number level="multiple" count="altova:level[ count( ancestor::altova:level ) >= $altova:omit-levels ]" format="{$altova:format}"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:number level="multiple" count="altova:level" format="{$altova:format}"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="altova:num-seq" mode="altova:step2">
		<xsl:variable name="altova:format" select="@altova:format"/>
		<xsl:variable name="altova:marker-design-id">
			<xsl:choose>
				<xsl:when test="@altova:marker-design-id">
					<xsl:value-of select="@altova:marker-design-id"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="generate-id( ancestor::altova:marker[1] )"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:for-each select="$altova:toc-xslt-tree/key( 'altova:toc-xslt-tree-key', $altova:marker-design-id )">
			<xsl:variable name="altova:name" select="@altova:name"/>
			<xsl:number level="any" count="altova:marker[ @altova:name = $altova:name ]" format="{$altova:format}"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:function name="altova:calc-relative-path" as="xs:string">
		<xsl:param name="altova:source-path"/>
		<xsl:param name="altova:target-path"/>
		<xsl:choose>
			<xsl:when test="$altova:source-path = $altova:target-path">
				<xsl:sequence select="''"/>
			</xsl:when>
			<xsl:when test="starts-with($altova:target-path,'http:') or starts-with($altova:target-path,'ftp:') or starts-with($altova:target-path,'file:')">
				<xsl:sequence select="$altova:target-path"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="altova:source-parts" select="tokenize($altova:source-path,'[/\\]')"/>
				<xsl:variable name="altova:target-parts" select="tokenize($altova:target-path,'[/\\]')"/>
				<xsl:variable name="altova:common-part-count" select="sum(for $i in (1 to count($altova:source-parts) - 1) return if( subsequence($altova:source-parts,1,$i) = subsequence($altova:target-parts,1,$i) ) then 1 else 0)"/>
				<xsl:sequence select="string-join((for $i in ($altova:common-part-count + 1 to count($altova:source-parts) - 1) return '..',for $i in ($altova:common-part-count + 1 to count($altova:target-parts)) return $altova:target-parts[$i]),'/')"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:map-preview-filepath" as="xs:string">
		<xsl:param name="filepath"/>
		<xsl:sequence select="altovaext:create-temp-file-mapping($filepath)" use-when="function-available('altovaext:create-temp-file-mapping',1)"/>
		<xsl:sequence select="$filepath" use-when="not(function-available('altovaext:create-temp-file-mapping',1))"/>
	</xsl:function>
	<xsl:function name="altova:is-cell-empty" as="xs:boolean">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="altova:is-node-empty( $altova:cell )"/>
	</xsl:function>
	<xsl:function name="altova:is-node-empty" as="xs:boolean">
		<xsl:param name="altova:node" as="element()"/>
		<xsl:sequence select="every $altova:child in $altova:node/child::node() satisfies ( ( boolean( $altova:child/self::text() ) and string-length( $altova:child ) = 0 ) or ( ( boolean( $altova:child/self::div ) or boolean( $altova:child/self::span ) or boolean( $altova:child/self::a ) ) and altova:is-node-empty( $altova:child ) ) )"/>
	</xsl:function>
	<xsl:function name="altova:col-span" as="xs:integer">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="if ( exists( $altova:cell/@colspan ) ) then xs:integer( $altova:cell/@colspan ) else 1"/>
	</xsl:function>
	<xsl:template match="@* | node()" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current">
				<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
			</xsl:apply-templates>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="tbody" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:choose>
			<xsl:when test="empty(tr)">
				<xsl:copy>
					<tr>
						<td/>
					</tr>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current">
						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
					</xsl:apply-templates>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="th | td" mode="altova:generate-table">
		<xsl:choose>
			<xsl:when test="altova:is-cell-empty( . )">
				<xsl:copy>
					<xsl:apply-templates select="@*" mode="#current"/>
					<xsl:text>&#160;</xsl:text>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current"/>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:GetChartYValuesForSingleSeries">
		<xsl:param name="seqCategoryLeafPos" as="node()*"/>
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:for-each select="$seqCategoryLeafPos">
			<xsl:element name="altova:Value">
				<xsl:value-of select="altova:GetChartYValueForSingleSeriesPos($nodeSeriesLeafPos, ., $bValuesInCategory)"/>
			</xsl:element>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="altova:GetChartYValueForSingleSeriesPos">
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="nodeCategoryLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:variable name="altova:seqCategoryContextIds" select="$nodeCategoryLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:seqSeriesContextIds" select="$nodeSeriesLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:sCommonContextId" select="for $i in $altova:seqCategoryContextIds return if (some $j in $altova:seqSeriesContextIds satisfies $i eq $j) then $i else ()" as="xs:string*"/>
		<xsl:choose>
			<xsl:when test="count($altova:sCommonContextId) gt 1">
				<xsl:message select="concat('Found several values instead of a single one (contexts: ', string-join($altova:sCommonContextId, ', '), ').')" terminate="yes"/>
			</xsl:when>
			<xsl:when test="count($altova:sCommonContextId) lt 1">
				<xsl:message select="concat('XBRL Chart: Info: No value found for position labeled &quot;', $nodeCategoryLeafPos/@altova:sLabel, '&quot;')" terminate="no"/>
				<xsl:sequence select="'altova:no-value'"/>
			</xsl:when>
			<xsl:when test="$bValuesInCategory">
				<xsl:sequence select="xs:string($nodeCategoryLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="xs:string($nodeSeriesLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GetChartLabelForPos" as="xs:string">
		<xsl:param name="nodeParam" as="node()"/>
		<xsl:value-of select="string-join($nodeParam/ancestor-or-self::altova:Pos/@altova:sLabel, ' ')"/>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-pixel" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="substring-before($normLength, 'px')"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * $altova:nPxPerIn"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * $altova:nPxPerIn div 2.54"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'mm')) * $altova:nPxPerIn div 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * $altova:nPxPerIn div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * $altova:nPxPerIn div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$normLength"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-mm" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'px')) div $altova:nPxPerIn * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * 10"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="substring-before($normLength, 'mm') "/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * 25.4 div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * 25.4 div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="number($normLength) div $altova:nPxPerIn * 25.4"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
</xsl:stylesheet>
