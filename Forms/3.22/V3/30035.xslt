<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2015 sp2 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:map="http://www.w3.org/2005/xpath-functions/map" xmlns:math="http://www.w3.org/2005/xpath-functions/math" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="#all">
	<xsl:output version="4.0" method="html" indent="no" encoding="UTF-8" use-character-maps="spaces" doctype-public="-//W3C//DTD HTML 4.01 Transitional//EN" doctype-system="http://www.w3.org/TR/html4/loose.dtd"/>
	<xsl:character-map name="spaces">
		<xsl:output-character character="&#160;" string="&amp;nbsp;"/>
	</xsl:character-map>
	<xsl:param name="altova:bGeneratingFromPxf" select="false()"/>
	<xsl:param name="SV_OutputFormat" select="'HTML'"/>
	<xsl:param name="SV_BaseOutputFileName" as="xs:string?">
		<xsl:sequence select="for $i in altovaext:get-base-output-uri(), $j in tokenize( $i, &apos;[/\\]&apos; )[last()] return replace( $j, &apos;\.[^\.\s#%;]*$&apos;, &apos;&apos; )" use-when="function-available(&apos;altovaext:get-base-output-uri&apos;)"/>
	</xsl:param>
	<xsl:param name="SV_GeneratedFileNamePrefix" select="if ( $SV_BaseOutputFileName ) then $SV_BaseOutputFileName else &apos;30035&apos;" as="xs:string?"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:import-schema schema-location="30035.xsd" use-when="system-property('xsl:is-schema-aware')='yes'"/>
	<xsl:variable name="altova:CssImages" select="()"/>
	<xsl:template match="/">
		<xsl:call-template name="altova:Root"/>
	</xsl:template>
	<xsl:template name="altova:Root">
		<html>
			<head>
				<title/>
				<meta name="generator" content="Altova StyleVision Enterprise Edition 2015 sp2 (http://www.altova.com)"/>
				<meta http-equiv="X-UA-Compatible" content="IE=9"/>
				<xsl:comment>[if IE]&gt;&lt;STYLE type=&quot;text/css&quot;&gt;.altova-rotate-left-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)} .altova-rotate-right-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1)} &lt;/STYLE&gt;&lt;![endif]</xsl:comment>
				<xsl:comment>[if !IE]&gt;&lt;!</xsl:comment>
				<style type="text/css">.altova-rotate-left-textbox{-webkit-transform: rotate(-90deg) translate(-100%, 0%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(-90deg) translate(-100%, 0%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(-90deg) translate(-100%, 0%); -ms-transform-origin: 0% 0%;}.altova-rotate-right-textbox{-webkit-transform: rotate(90deg) translate(0%, -100%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(90deg) translate(0%, -100%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(90deg) translate(0%, -100%); -ms-transform-origin: 0% 0%;}</style>
				<xsl:comment>&lt;![endif]</xsl:comment>
				<style type="text/css">@page { margin-left:0.60in; margin-right:0.60in; margin-top:0.79in; margin-bottom:0.79in } @media print { br.altova-page-break { page-break-before: always; } }</style>
			</head>
			<body>
				<br/>
				<span>
					<xsl:text>аздел I. Общие сведения</xsl:text>
				</span>
				<br/>
				<span>
					<xsl:text>Отчетный период: 20__ год.</xsl:text>
				</span>
				<br/>
				<span>
					<xsl:text>Количество разрезов, включенных в отчет: административных (структурных единиц)__________, технических единиц___________</xsl:text>
				</span>
				<br/>
				<br/>
				<br/>
				<xsl:variable name="altova:table">
					<table border="1" width="100%">
						<xsl:variable name="altova:CurrContextGrid_0" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody style="caption-side:top; table-layout:fixed; ">
							<tr style="height:6.31in; table-layout:fixed; ">
								<td style="caption-side:top; text-align:left; ">
									<span>
										<xsl:text>1.	Сведения о лицензиях на добычу угля :</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>	номер и дата выдачи лицензии __________________________</xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=3]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<br/>
									<span>
										<xsl:text>срок действия лицензии с </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=5]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text> по </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=6]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<br/>
									<br/>
									<span>
										<xsl:text>2.	Производственная мощность на конец отчетного года&#160; </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=7]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text>&#160; тыс.т</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>	ввод мощности за отчетный период&#160;&#160;&#160; ________________ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=8]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text> тыс.т</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>	выбытие мощностей за отчетный период_____________ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=9]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text>тыс.т</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>	&#160;&#160;&#160;&#160;&#160;&#160; использование среднегодовой мощности __________&#160; </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=10]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text> %</xsl:text>
									</span>
									<br/>
									<br/>
									<span>
										<xsl:text>3.	Год сдачи в эксплуатацию / последней реконструкции ______ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=11]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<br/>
									<br/>
									<span>
										<xsl:text>4.	Месторождение&#160; _____________________________________ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=12]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<br/>
									<br/>
									<span>
										<xsl:text>5.	Максимальная глубина разработки на конец&#160; года ______ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=15]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text>&#160; м.</xsl:text>
									</span>
									<br/>
									<br/>
									<span>
										<xsl:text>6.	Приток воды: нормальный&#160;&#160;&#160;&#160; ______&#160; </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=16]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text> м3/ч</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>	максимальный сезонный _____ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=17]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text> м3/ч</xsl:text>
									</span>
									<br/>
									<br/>
									<span>
										<xsl:text>7.	Число разрабатываемых пластов на конец года (в сводных отчетах по компании - не заполнять)&#160;&#160; _______ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=18]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<br/>
									<br/>
									<span>
										<xsl:text>8.	Их суммарная мощность геологическая/рабочая _______ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=19]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text>&#160; / </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=20]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text>м</xsl:text>
									</span>
									<br/>
									<br/>
									<span>
										<xsl:text>9.	Угол падения разрабатываемых пластов:</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>	&#160;&#160;&#160;&#160;&#160;&#160; от&#160; _____ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=21]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text> о</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>	&#160;&#160;&#160;&#160;&#160;&#160; до _____ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=22]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text> о </xsl:text>
									</span>
									<br/>
									<br/>
									<span>
										<xsl:text>10.	Средний объемный вес угля __________ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=23]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text> т/м3	</xsl:text>
									</span>
									<br/>
									<br/>
									<span>
										<xsl:text>11.	Мощность покрывающих (вмещающих) пород на конец года _____ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=24]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text>&#160; м</xsl:text>
									</span>
									<br/>
									<br/>
									<span>
										<xsl:text>12.	Средний объемный вес вскрышных пород _______ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_010[@code=25]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text> т/м3</xsl:text>
									</span>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
									<br/>
								</td>
								<td style="caption-side:top; ">
									<span>
										<xsl:text>13.	Балансовые запасы угля (кат. А+В+С1) </xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>	на конец отчетного года </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_011[@code=26]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text>&#160; тыс.т</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>в том числе по маркам:&#160; </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_011[@code!=26]">
													<xsl:for-each select="concat( &quot;        &quot; ,  @name ,  &quot; _____  &quot;, @column1 )">
														<p>
															<xsl:choose>
																<xsl:when test=". instance of element() or . instance of document-node()">
																	<xsl:apply-templates/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:value-of select="."/>
																</xsl:otherwise>
															</xsl:choose>
														</p>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<br/>
									<br/>
									<span>
										<xsl:text>14	Промышленные запасы угля на конец</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>	отчетного года&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; _______________________ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_012[@code=27]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text> тыс.т</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>в том числе по маркам:&#160;&#160; </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_012[@code!=27]">
													<xsl:for-each select="concat( &quot;        &quot; ,  @name ,  &quot; _____  &quot;, @column1 )">
														<p>
															<xsl:choose>
																<xsl:when test=". instance of element() or . instance of document-node()">
																	<xsl:apply-templates/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:value-of select="."/>
																</xsl:otherwise>
															</xsl:choose>
														</p>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<br/>
									<br/>
									<span>
										<xsl:text>в том числе подготовленные&#160;&#160; __________________ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_013[@code=28]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text> тыс.т</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>&#160;&#160;&#160;&#160; из них готовые к выемке&#160;&#160;&#160; __________________ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_013[@code=29]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text>&#160; тыс.т</xsl:text>
									</span>
									<br/>
									<br/>
									<span>
										<xsl:text>15.	Эксплуатационные потери угля&#160; _________________ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_013[@code=30]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text> тыс.т</xsl:text>
									</span>
									<br/>
									<br/>
									<span>
										<xsl:text>16.	Количество уступов на конец отчетного года</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>	угольных&#160;&#160;&#160; _____ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_013[@code=31]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<br/>
									<span>
										<xsl:text>	породных&#160;&#160; _____ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_013[@code=32]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<br/>
									<br/>
									<span>
										<xsl:text>17.	Действующая длина уступов</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>	угольных&#160;&#160;&#160; _____ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_013[@code=33]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text>&#160; м</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>	породных&#160;&#160; _____ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_013[@code=34]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text> м</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>&#160;</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>18.	Среднедействующая высота уступов</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>	угольных&#160;&#160;&#160; _____ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_013[@code=35]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text> м</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>	породных&#160;&#160; _____ </xsl:text>
									</span>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strdata_013[@code=36]">
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<span>
										<xsl:text> м</xsl:text>
									</span>
									<br/>
									<br/>
								</td>
							</tr>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<br/>
			</body>
		</html>
	</xsl:template>
	<xsl:function name="altova:is-cell-empty" as="xs:boolean">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="altova:is-node-empty( $altova:cell )"/>
	</xsl:function>
	<xsl:function name="altova:is-node-empty" as="xs:boolean">
		<xsl:param name="altova:node" as="element()"/>
		<xsl:sequence select="every $altova:child in $altova:node/child::node() satisfies ( ( boolean( $altova:child/self::text() ) and string-length( $altova:child ) = 0 ) or ( ( boolean( $altova:child/self::div ) or boolean( $altova:child/self::span ) or boolean( $altova:child/self::a ) ) and altova:is-node-empty( $altova:child ) ) )"/>
	</xsl:function>
	<xsl:function name="altova:col-span" as="xs:integer">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="if ( exists( $altova:cell/@colspan ) ) then xs:integer( $altova:cell/@colspan ) else 1"/>
	</xsl:function>
	<xsl:template match="@* | node()" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current">
				<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
			</xsl:apply-templates>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="tbody" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:choose>
			<xsl:when test="empty(tr)">
				<xsl:copy>
					<tr>
						<td/>
					</tr>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current">
						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
					</xsl:apply-templates>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="th | td" mode="altova:generate-table">
		<xsl:choose>
			<xsl:when test="altova:is-cell-empty( . )">
				<xsl:copy>
					<xsl:apply-templates select="@*" mode="#current"/>
					<xsl:text>&#160;</xsl:text>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current"/>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:GetChartYValuesForSingleSeries">
		<xsl:param name="seqCategoryLeafPos" as="node()*"/>
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:for-each select="$seqCategoryLeafPos">
			<xsl:element name="altova:Value">
				<xsl:value-of select="altova:GetChartYValueForSingleSeriesPos($nodeSeriesLeafPos, ., $bValuesInCategory)"/>
			</xsl:element>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="altova:GetChartYValueForSingleSeriesPos">
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="nodeCategoryLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:variable name="altova:seqCategoryContextIds" select="$nodeCategoryLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:seqSeriesContextIds" select="$nodeSeriesLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:sCommonContextId" select="for $i in $altova:seqCategoryContextIds return if (some $j in $altova:seqSeriesContextIds satisfies $i eq $j) then $i else ()" as="xs:string*"/>
		<xsl:choose>
			<xsl:when test="count($altova:sCommonContextId) gt 1">
				<xsl:message select="concat('Found several values instead of a single one (contexts: ', string-join($altova:sCommonContextId, ', '), ').')" terminate="yes"/>
			</xsl:when>
			<xsl:when test="count($altova:sCommonContextId) lt 1">
				<xsl:message select="concat('XBRL Chart: Info: No value found for position labeled &quot;', $nodeCategoryLeafPos/@altova:sLabel, '&quot;')" terminate="no"/>
				<xsl:sequence select="'altova:no-value'"/>
			</xsl:when>
			<xsl:when test="$bValuesInCategory">
				<xsl:sequence select="xs:string($nodeCategoryLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="xs:string($nodeSeriesLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GetChartLabelForPos" as="xs:string">
		<xsl:param name="nodeParam" as="node()"/>
		<xsl:value-of select="string-join($nodeParam/ancestor-or-self::altova:Pos/@altova:sLabel, ' ')"/>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-pixel" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="substring-before($normLength, 'px')"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * $altova:nPxPerIn"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * $altova:nPxPerIn div 2.54"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'mm')) * $altova:nPxPerIn div 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * $altova:nPxPerIn div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * $altova:nPxPerIn div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$normLength"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-mm" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'px')) div $altova:nPxPerIn * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * 10"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="substring-before($normLength, 'mm') "/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * 25.4 div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * 25.4 div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="number($normLength) div $altova:nPxPerIn * 25.4"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
</xsl:stylesheet>
