<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2015 sp2 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:map="http://www.w3.org/2005/xpath-functions/map" xmlns:math="http://www.w3.org/2005/xpath-functions/math" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="#all">
	<xsl:output version="4.0" method="html" indent="no" encoding="UTF-8" use-character-maps="spaces" doctype-public="-//W3C//DTD HTML 4.01 Transitional//EN" doctype-system="http://www.w3.org/TR/html4/loose.dtd"/>
	<xsl:character-map name="spaces">
		<xsl:output-character character="&#160;" string="&amp;nbsp;"/>
	</xsl:character-map>
	<xsl:param name="altova:bGeneratingFromPxf" select="false()"/>
	<xsl:param name="SV_OutputFormat" select="'HTML'"/>
	<xsl:param name="SV_BaseOutputFileName" as="xs:string?">
		<xsl:sequence select="for $i in altovaext:get-base-output-uri(), $j in tokenize( $i, &apos;[/\\]&apos; )[last()] return replace( $j, &apos;\.[^\.\s#%;]*$&apos;, &apos;&apos; )" use-when="function-available(&apos;altovaext:get-base-output-uri&apos;)"/>
	</xsl:param>
	<xsl:param name="SV_GeneratedFileNamePrefix" select="if ( $SV_BaseOutputFileName ) then $SV_BaseOutputFileName else &apos;20146&apos;" as="xs:string?"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:import-schema schema-location="20146.xsd" use-when="system-property('xsl:is-schema-aware')='yes'"/>
	<xsl:variable name="altova:CssImages" select="()"/>
	<xsl:template match="/">
		<xsl:call-template name="altova:Root"/>
	</xsl:template>
	<xsl:template name="altova:Root">
		<html>
			<head>
				<title/>
				<meta name="generator" content="Altova StyleVision Enterprise Edition 2015 sp2 (http://www.altova.com)"/>
				<meta http-equiv="X-UA-Compatible" content="IE=9"/>
				<xsl:comment>[if IE]&gt;&lt;STYLE type=&quot;text/css&quot;&gt;.altova-rotate-left-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)} .altova-rotate-right-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1)} &lt;/STYLE&gt;&lt;![endif]</xsl:comment>
				<xsl:comment>[if !IE]&gt;&lt;!</xsl:comment>
				<style type="text/css">
					<xsl:value-of select="document('style.css')" disable-output-escaping="yes" />
				</style>
				<style type="text/css">.altova-rotate-left-textbox{-webkit-transform: rotate(-90deg) translate(-100%, 0%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(-90deg) translate(-100%, 0%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(-90deg) translate(-100%, 0%); -ms-transform-origin: 0% 0%;}.altova-rotate-right-textbox{-webkit-transform: rotate(90deg) translate(0%, -100%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(90deg) translate(0%, -100%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(90deg) translate(0%, -100%); -ms-transform-origin: 0% 0%;}</style>
				<xsl:comment>&lt;![endif]</xsl:comment>
				<style type="text/css">@page { margin-left:0.60in; margin-right:0.60in; margin-top:0.79in; margin-bottom:0.79in } @media print { br.altova-page-break { page-break-before: always; } }</style>
			</head>
			<body>
				<pre style="text-align:right; ">
					<span style="font-family:Times New Roman; padding-left:inherit; ">
						<xsl:text>Приложение № 1.78.1</xsl:text>
					</span>
					<br/>
					<span style="font-family:Times New Roman; padding-left:inherit; ">
						<xsl:text>к приказу Минэнерго России</xsl:text>
					</span>
					<br/>
					<span style="font-family:Times New Roman; padding-left:inherit; ">
						<xsl:text>от «__» ______ 2015 г. №___</xsl:text>
					</span>
				</pre>
				<br/>
				<center>
					<span style="font-family:Times New Roman; font-size:12pt; font-weight:bold; ">
						<xsl:text>ГОСУДАРСТВЕННАЯ ИНФОРМАЦИОННАЯ СИСТЕМА ТОПЛИВНО-ЭНЕРГЕТИЧЕСКОГО КОМПЛЕКСА</xsl:text>
					</span>
				</center>
				<br/>
				<xsl:variable name="altova:table">
					<table border="1" width="100%">
						<xsl:variable name="altova:CurrContextGrid_0" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<tr>
								<td>
									<center>
										<span style="font-family:Times New Roman; font-size:12pt; ">
											<xsl:text>ПРЕДОСТАВЛЯЕТСЯ В ЭЛЕКТРОННОМ ВИДЕ </xsl:text>
										</span>
										<br/>
										<span style="font-family:Times New Roman; font-size:12pt; ">
											<xsl:text>В МИНИСТЕРСТВО ЭНЕРГЕТИКИ РОССИЙСКОЙ ФЕДЕРАЦИИ</xsl:text>
										</span>
									</center>
								</td>
							</tr>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<br/>
				<xsl:variable name="altova:table">
					<table border="1" width="100%">
						<xsl:variable name="altova:CurrContextGrid_1" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<tr>
								<td>
									<center>
										<span style="font-weight:bold; ">
											<xsl:text>Сведения о модернизации, реконструкции и планируемых к реализации инвестиционных проектах нефтегазохимического производства</xsl:text>
										</span>
									</center>
								</td>
							</tr>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<br/>
				<xsl:variable name="altova:table">
					<table border="1" width="100%">
						<xsl:variable name="altova:CurrContextGrid_2" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<tr>
								<td width="50%">
									<center>
										<span>
											<xsl:text>Сегмент в области нефтедобывающей промышленности, нефтеперерабатывающей промышленности, нефтехимической про-мышленности, транспортировки по магистральным трубопроводам нефти и нефтепродуктов</xsl:text>
										</span>
									</center>
								</td>
								<td>
									<center>
										<span style="font-family:Times New Roman; font-size:12pt; ">
											<xsl:text>Шифр формы: 1.78.</xsl:text>
										</span>
									</center>
								</td>
							</tr>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<br/>
				<xsl:variable name="altova:table">
					<table border="1" width="100%">
						<xsl:variable name="altova:CurrContextGrid_3" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<tr>
								<td width="50%">
									<center>
										<span style="font-family:Times New Roman; font-size:12pt; ">
											<xsl:text>Представляют:</xsl:text>
										</span>
									</center>
								</td>
								<td width="25%">
									<center>
										<span style="font-family:Times New Roman; font-size:12pt; ">
											<xsl:text>Сроки представления:</xsl:text>
										</span>
									</center>
								</td>
								<td width="25%">
									<center>
										<span style="font-family:Times New Roman; font-size:12pt; ">
											<xsl:text>Периодичность предоставления:</xsl:text>
										</span>
									</center>
								</td>
							</tr>
							<tr style="height:0.43in; ">
								<td width="50%">
									<span>
										<xsl:text>организации, осуществляющие деятельность по производству неф-те- и газохимической продукции</xsl:text>
									</span>
								</td>
								<td width="25%">
									<span>
										<xsl:text>До 5-го числа месяца, следующе-го за отчетным</xsl:text>
									</span>
								</td>
								<td width="25%">
									<center>
										<span>
											<xsl:text>Ежемесячно</xsl:text>
										</span>
									</center>
								</td>
							</tr>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<br class="altova-page-break" clear="all"/>
				<center/>
				<br/>
				<br/>
				<span>
					<xsl:text>Раздел 1. Сведения о фактической модернизации и реконструкции производства </xsl:text>
				</span>
				<br/>
				<xsl:variable name="altova:table">
					<table border="1">
						<xsl:variable name="altova:CurrContextGrid_4" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<thead>
							<tr>
								<th rowspan="4">
									<span>
										<xsl:text>Компания</xsl:text>
									</span>
								</th>
								<th rowspan="4">
									<span>
										<xsl:text>НПЗ</xsl:text>
									</span>
								</th>
								<th rowspan="4">
									<span>
										<xsl:text>Местоположение (Субъект РФ)</xsl:text>
									</span>
								</th>
								<th rowspan="4">
									<span>
										<xsl:text>Вид технологической установки (процесс)</xsl:text>
									</span>
								</th>
								<th rowspan="4">
									<span>
										<xsl:text>Наименование технологической установки</xsl:text>
									</span>
								</th>
								<th rowspan="4">
									<span>
										<xsl:text>Вид производимой продукции (при наличии)</xsl:text>
									</span>
								</th>
								<th rowspan="4">
									<span>
										<xsl:text>Код строки</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Год ввода установки</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Вид перерабатываемого/</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>компримируемого сырья</xsl:text>
									</span>
									<br/>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Производитель перерабатываемого углеводородного сырья</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Проектная мощность, тыс. т/год </xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Рекон-струкция без увеличения мощности (Да/ Нет) </xsl:text>
									</span>
								</th>
								<th colspan="4">
									<span>
										<xsl:text>Ввод мощности, тыс. т/год</xsl:text>
									</span>
								</th>
								<th colspan="4">
									<span>
										<xsl:text>Реконструкция мощности, тыс. т/год</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Численность сотрудников НПЗ, чел.</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Увеличение числа рабочих мест за счет реализации проекта к концу отчетного периода, чел.</xsl:text>
									</span>
								</th>
								<th colspan="4">
									<span>
										<xsl:text>Стадия инвестиционного проекта</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Планируемый год завершения реализации инвестиционного проекта</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Плановое увеличение числа рабочих мест по завершении реализации инвестиционного проекта, чел.</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Вводимая мощность по завершении реализации инвестиционного проекта, тыс. т/год</xsl:text>
									</span>
								</th>
								<th colspan="2">
									<span>
										<xsl:text>Переработка, тыс. т/год</xsl:text>
									</span>
								</th>
								<th colspan="2">
									<span>
										<xsl:text>Отгрузка продукции, тыс. т/год</xsl:text>
									</span>
								</th>
							</tr>
							<tr>
								<th rowspan="2">
									<span>
										<xsl:text>План на месяц</xsl:text>
									</span>
								</th>
								<th rowspan="2">
									<span>
										<xsl:text>Факт за месяц</xsl:text>
									</span>
								</th>
								<th rowspan="2">
									<span>
										<xsl:text>План с начала года</xsl:text>
									</span>
								</th>
								<th rowspan="2">
									<span>
										<xsl:text>Факт с начала года</xsl:text>
									</span>
								</th>
								<th rowspan="2">
									<span>
										<xsl:text>План на месяц</xsl:text>
									</span>
								</th>
								<th rowspan="2">
									<span>
										<xsl:text>Факт за месяц</xsl:text>
									</span>
								</th>
								<th rowspan="2">
									<span>
										<xsl:text>План с начала года</xsl:text>
									</span>
								</th>
								<th rowspan="2">
									<span>
										<xsl:text>Факт с начала года</xsl:text>
									</span>
								</th>
								<th colspan="2">
									<span>
										<xsl:text>План</xsl:text>
									</span>
								</th>
								<th colspan="2">
									<span>
										<xsl:text>Факт</xsl:text>
									</span>
								</th>
								<th rowspan="2">
									<span>
										<xsl:text>Текущее значение</xsl:text>
									</span>
								</th>
								<th rowspan="2">
									<span>
										<xsl:text>По факту завершения проекта</xsl:text>
									</span>
								</th>
								<th rowspan="2">
									<span>
										<xsl:text>Текущее значение</xsl:text>
									</span>
								</th>
								<th rowspan="2">
									<span>
										<xsl:text>По факту завершения проекта</xsl:text>
									</span>
								</th>
							</tr>
							<tr>
								<th>
									<span>
										<xsl:text>Наименование стадии</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Процент выполнения, %</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Наименование стадии</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Процент выполнения, %</xsl:text>
									</span>
								</th>
							</tr>
							<tr>
								<th>
									<span>
										<xsl:text>1</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>2</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>3</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>4</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>5</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>6</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>7</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>8</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>9</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>10</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>11</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>12</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>13</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>14</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>15</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>16</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>17</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>18</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>19</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>20</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>21</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>22</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>23</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>24</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>25</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>26</xsl:text>
									</span>
								</th>
							</tr>
						</thead>
						<tbody>
							<xsl:for-each select="$XML">
								<xsl:for-each select="document">
									<xsl:for-each select="flat">
										<xsl:for-each select="strdata_01">
											<tr>
												<td>
													<xsl:for-each select="$XML">
														<xsl:for-each select="document">
															<xsl:for-each select="flat">
																<xsl:for-each select="param">
																	<xsl:for-each select="@predpr">
																		<span>
																			<xsl:value-of select="string(.)"/>
																		</span>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td/>
												<td>
													<xsl:for-each select="$XML">
														<xsl:for-each select="document">
															<xsl:for-each select="flat">
																<xsl:for-each select="param">
																	<xsl:for-each select="@subject">
																		<span>
																			<xsl:value-of select="string(.)"/>
																		</span>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column2">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column3">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@code">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column4">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column5">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column6">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column7">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column8">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column9">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column10">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column11">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column12">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column13">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column14">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column15">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column16">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column17">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column18">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column19">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column20">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column21">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column22">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column23">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column24">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column25">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column26">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column27">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column28">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column29">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<br/>
				<br/>
				<span>
					<xsl:text>Раздел 2. Сведения о долгосрочных планах модернизации и реконструкции производства</xsl:text>
				</span>
				<br/>
				<br/>
				<span>
					<xsl:text>Таблица 2.1. Сведения о долгосрочных планах по вводу мощностей технологических установок</xsl:text>
				</span>
				<br/>
				<xsl:variable name="altova:table">
					<table border="1">
						<xsl:variable name="altova:CurrContextGrid_5" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<thead>
							<tr>
								<th rowspan="3">
									<span>
										<xsl:text>Компания</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>НПЗ</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Местоположение (Субъект РФ)</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Код&#160; строки</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Вид технологической установки (процесс)</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Наименование технологической установки</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Вид производимой продукции (при наличии)</xsl:text>
									</span>
								</th>
								<th colspan="12">
									<span>
										<xsl:text>Планы по вводу мощности, тыс. т/год</xsl:text>
									</span>
								</th>
							</tr>
							<tr>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 1"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 2"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 3"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 4"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 5"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 6"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 7"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 8"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 9"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 10"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 15"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 20"/>
									</span>
								</th>
							</tr>
							<tr>
								<th>
									<span>
										<xsl:text>1</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>2</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>3</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>4</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>5</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>6</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>7</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>8</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>9</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>10</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>11</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>10</xsl:text>
									</span>
								</th>
							</tr>
						</thead>
						<tbody>
							<xsl:for-each select="$XML">
								<xsl:for-each select="document">
									<xsl:for-each select="flat">
										<xsl:for-each select="strdata_02">
											<tr>
												<td>
													<xsl:for-each select="$XML">
														<xsl:for-each select="document">
															<xsl:for-each select="flat">
																<xsl:for-each select="param">
																	<xsl:for-each select="@predpr">
																		<span>
																			<xsl:value-of select="string(.)"/>
																		</span>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td/>
												<td>
													<xsl:for-each select="$XML">
														<xsl:for-each select="document">
															<xsl:for-each select="flat">
																<xsl:for-each select="param">
																	<xsl:for-each select="@subject">
																		<span>
																			<xsl:value-of select="string(.)"/>
																		</span>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@code">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column2">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column3">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column4">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column5">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column6">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column7">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column8">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column9">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column10">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column11">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column12">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column13">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column14">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column15">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<br/>
				<span>
					<xsl:text>Таблица 2.2. Сведения о долгосрочных планах по реконструкции мощностей технологических установок</xsl:text>
				</span>
				<br/>
				<xsl:variable name="altova:table">
					<table border="1">
						<xsl:variable name="altova:CurrContextGrid_6" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<thead>
							<tr>
								<th rowspan="3">
									<span>
										<xsl:text>Компания</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>НПЗ</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Местоположение (Субъект РФ)</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Код строки</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Вид технологической установки (процесс)</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Наименование технологической установки</xsl:text>
									</span>
								</th>
								<th rowspan="3">
									<span>
										<xsl:text>Вид производимой продукции (при наличии)</xsl:text>
									</span>
								</th>
								<th colspan="12">
									<span>
										<xsl:text>Планы по реконструкции мощности, тыс. т/год</xsl:text>
									</span>
								</th>
							</tr>
							<tr>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 1"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 2"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 3"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 4"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 5"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 6"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 7"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 8"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 9"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 10"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 15"/>
									</span>
								</th>
								<th>
									<span>
										<xsl:value-of select="number(document/flat/param/@year) + 20"/>
									</span>
								</th>
							</tr>
							<tr>
								<th>
									<span>
										<xsl:text>1</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>2</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>3</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>4</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>5</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>6</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>7</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>8</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>9</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>10</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>11</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>12</xsl:text>
									</span>
								</th>
							</tr>
						</thead>
						<tbody>
							<xsl:for-each select="$XML">
								<xsl:for-each select="document">
									<xsl:for-each select="flat">
										<xsl:for-each select="strdata_03">
											<tr>
												<td>
													<xsl:for-each select="$XML">
														<xsl:for-each select="document">
															<xsl:for-each select="flat">
																<xsl:for-each select="param">
																	<xsl:for-each select="@predpr">
																		<span>
																			<xsl:value-of select="string(.)"/>
																		</span>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td/>
												<td>
													<xsl:for-each select="$XML">
														<xsl:for-each select="document">
															<xsl:for-each select="flat">
																<xsl:for-each select="param">
																	<xsl:for-each select="@subject">
																		<span>
																			<xsl:value-of select="string(.)"/>
																		</span>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@code">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column2">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column3">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column4">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column5">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column6">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column7">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column8">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column9">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column10">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column11">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column12">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column13">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column14">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column15">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<br/>
				<br/>
				<span>
					<xsl:text>Раздел 3. Сведения об изменениях параметров инвестиционных проектов в ходе реализации проектов</xsl:text>
				</span>
				<br/>
				<xsl:variable name="altova:table">
					<table border="1">
						<xsl:variable name="altova:CurrContextGrid_7" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<thead>
							<tr>
								<th rowspan="2">
									<span>
										<xsl:text>Компания</xsl:text>
									</span>
								</th>
								<th rowspan="2">
									<span>
										<xsl:text>НПЗ</xsl:text>
									</span>
								</th>
								<th rowspan="2">
									<span>
										<xsl:text>Местоположение (Субъект РФ)</xsl:text>
									</span>
								</th>
								<th rowspan="2">
									<span>
										<xsl:text>Вид технологической установки (процесс)</xsl:text>
									</span>
								</th>
								<th rowspan="2">
									<span>
										<xsl:text>Наименование технологической установки</xsl:text>
									</span>
								</th>
								<th rowspan="2">
									<span>
										<xsl:text>Вид производимой продукции (при наличии)</xsl:text>
									</span>
								</th>
								<th rowspan="2">
									<span>
										<xsl:text>Код строки</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Изменение параметров проекта</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Причина изменения параметров</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>Основные проблемы</xsl:text>
									</span>
								</th>
							</tr>
							<tr>
								<th>
									<span>
										<xsl:text>1</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>2</xsl:text>
									</span>
								</th>
								<th>
									<span>
										<xsl:text>3</xsl:text>
									</span>
								</th>
							</tr>
						</thead>
						<tbody>
							<xsl:for-each select="$XML">
								<xsl:for-each select="document">
									<xsl:for-each select="flat">
										<xsl:for-each select="strdata_04">
											<tr>
												<td>
													<xsl:for-each select="$XML">
														<xsl:for-each select="document">
															<xsl:for-each select="flat">
																<xsl:for-each select="param">
																	<xsl:for-each select="@predpr">
																		<span>
																			<xsl:value-of select="string(.)"/>
																		</span>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td/>
												<td>
													<xsl:for-each select="$XML">
														<xsl:for-each select="document">
															<xsl:for-each select="flat">
																<xsl:for-each select="param">
																	<xsl:for-each select="@subject">
																		<span>
																			<xsl:value-of select="string(.)"/>
																		</span>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column1">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column2">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column3">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@code">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column4">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column5">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@column6">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<br/>
				<span style="font-size:16pt; ">
					<xsl:text>Служебный раздел</xsl:text>
				</span>
				<br/>
				<hr/>
				<br/>
				<span>
					<xsl:text>Сведения о Субъекте ТЭК, предоставившем информацию</xsl:text>
				</span>
				<br/>
				<xsl:variable name="altova:table">
					<table border="1" width="100%">
						<xsl:variable name="altova:CurrContextGrid_8" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<tr>
								<td style="width:4.16in; ">
									<span style="font-weight:bold; ">
										<xsl:text>Наименование отчитывающейся организации</xsl:text>
									</span>
								</td>
								<td>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strServiceInf">
													<xsl:for-each select="@col11">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</td>
							</tr>
							<tr>
								<td style="width:4.16in; ">
									<span style="font-weight:bold; ">
										<xsl:text>Почтовый адрес</xsl:text>
									</span>
								</td>
								<td>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strServiceInf">
													<xsl:for-each select="@col12">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</td>
							</tr>
							<tr>
								<td style="width:4.16in; ">
									<span style="font-weight:bold; ">
										<xsl:text>Фактический адрес</xsl:text>
									</span>
								</td>
								<td>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strServiceInf">
													<xsl:for-each select="@col3">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</td>
							</tr>
							<tr>
								<td style="width:4.16in; ">
									<span style="font-weight:bold; ">
										<xsl:text>ОГРН (Основной государственный регистрационный номер)</xsl:text>
									</span>
								</td>
								<td>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strServiceInf">
													<xsl:for-each select="@col4">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</td>
							</tr>
							<tr>
								<td style="width:4.16in; ">
									<span style="font-weight:bold; ">
										<xsl:text>ИНН (Идентификационный номер налогоплательщика)</xsl:text>
									</span>
								</td>
								<td>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strServiceInf">
													<xsl:for-each select="@col5">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</td>
							</tr>
							<tr>
								<td style="width:4.16in; ">
									<span style="font-weight:bold; ">
										<xsl:text>КПП (Код причины постановки на учет)</xsl:text>
									</span>
								</td>
								<td>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strServiceInf">
													<xsl:for-each select="@col6">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</td>
							</tr>
							<tr>
								<td style="width:4.16in; ">
									<span style="font-weight:bold; ">
										<xsl:text>ОКПО (Общероссийский классификатор предприятий и организаций)</xsl:text>
									</span>
								</td>
								<td>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strServiceInf">
													<xsl:for-each select="@col7">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</td>
							</tr>
							<tr>
								<td style="width:4.16in; ">
									<span style="font-weight:bold; ">
										<xsl:text>ОКВЭД (Код вида деятельности)</xsl:text>
									</span>
								</td>
								<td>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strServiceInf">
													<xsl:for-each select="@col8">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</td>
							</tr>
							<tr>
								<td style="width:4.16in; ">
									<span style="font-weight:bold; ">
										<xsl:text>ОКТМО (Код территории)</xsl:text>
									</span>
								</td>
								<td>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strServiceInf">
													<xsl:for-each select="@col9">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</td>
							</tr>
							<tr>
								<td style="width:4.16in; ">
									<span style="font-weight:bold; ">
										<xsl:text>ОКОГУ (Код министерства (ведомства), органа управления)</xsl:text>
									</span>
								</td>
								<td>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strServiceInf">
													<xsl:for-each select="@col10">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</td>
							</tr>
							<tr>
								<td style="width:4.16in; ">
									<span style="font-weight:bold; ">
										<xsl:text>ОКОПФ (Код организационно-правовой формы)</xsl:text>
									</span>
								</td>
								<td>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strServiceInf">
													<xsl:for-each select="@col11">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</td>
							</tr>
							<tr>
								<td style="width:4.16in; ">
									<span style="font-weight:bold; ">
										<xsl:text>ОКФС (Код формы собственности)</xsl:text>
									</span>
								</td>
								<td>
									<xsl:for-each select="$XML">
										<xsl:for-each select="document">
											<xsl:for-each select="flat">
												<xsl:for-each select="strServiceInf">
													<xsl:for-each select="@col12">
														<span>
															<xsl:value-of select="string(.)"/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</td>
							</tr>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<br/>
				<span>
					<xsl:text>Сведения о времени поступления информации</xsl:text>
				</span>
				<br/>
				<xsl:variable name="altova:table">
					<table border="1" width="100%">
						<xsl:variable name="altova:CurrContextGrid_9" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<tr>
								<td style="width:4.13in; ">
									<span style="font-weight:bold; ">
										<xsl:text>Дата формирования отчета техническими средствами ГИС ТЭК</xsl:text>
									</span>
								</td>
								<td/>
							</tr>
							<tr>
								<td style="width:4.13in; ">
									<span style="font-weight:bold; ">
										<xsl:text>Дата получения последнего электронного документа, необходимого для формирования отчета</xsl:text>
									</span>
								</td>
								<td/>
							</tr>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<br/>
			</body>
		</html>
	</xsl:template>
	<xsl:function name="altova:is-cell-empty" as="xs:boolean">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="altova:is-node-empty( $altova:cell )"/>
	</xsl:function>
	<xsl:function name="altova:is-node-empty" as="xs:boolean">
		<xsl:param name="altova:node" as="element()"/>
		<xsl:sequence select="every $altova:child in $altova:node/child::node() satisfies ( ( boolean( $altova:child/self::text() ) and string-length( $altova:child ) = 0 ) or ( ( boolean( $altova:child/self::div ) or boolean( $altova:child/self::span ) or boolean( $altova:child/self::a ) ) and altova:is-node-empty( $altova:child ) ) )"/>
	</xsl:function>
	<xsl:function name="altova:col-span" as="xs:integer">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="if ( exists( $altova:cell/@colspan ) ) then xs:integer( $altova:cell/@colspan ) else 1"/>
	</xsl:function>
	<xsl:template match="@* | node()" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current">
				<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
			</xsl:apply-templates>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="tbody" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:choose>
			<xsl:when test="empty(tr)">
				<xsl:copy>
					<tr>
						<td/>
					</tr>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current">
						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
					</xsl:apply-templates>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="th | td" mode="altova:generate-table">
		<xsl:choose>
			<xsl:when test="altova:is-cell-empty( . )">
				<xsl:copy>
					<xsl:apply-templates select="@*" mode="#current"/>
					<xsl:text>&#160;</xsl:text>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current"/>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:GetChartYValuesForSingleSeries">
		<xsl:param name="seqCategoryLeafPos" as="node()*"/>
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:for-each select="$seqCategoryLeafPos">
			<xsl:element name="altova:Value">
				<xsl:value-of select="altova:GetChartYValueForSingleSeriesPos($nodeSeriesLeafPos, ., $bValuesInCategory)"/>
			</xsl:element>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="altova:GetChartYValueForSingleSeriesPos">
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="nodeCategoryLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:variable name="altova:seqCategoryContextIds" select="$nodeCategoryLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:seqSeriesContextIds" select="$nodeSeriesLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:sCommonContextId" select="for $i in $altova:seqCategoryContextIds return if (some $j in $altova:seqSeriesContextIds satisfies $i eq $j) then $i else ()" as="xs:string*"/>
		<xsl:choose>
			<xsl:when test="count($altova:sCommonContextId) gt 1">
				<xsl:message select="concat('Found several values instead of a single one (contexts: ', string-join($altova:sCommonContextId, ', '), ').')" terminate="yes"/>
			</xsl:when>
			<xsl:when test="count($altova:sCommonContextId) lt 1">
				<xsl:message select="concat('XBRL Chart: Info: No value found for position labeled &quot;', $nodeCategoryLeafPos/@altova:sLabel, '&quot;')" terminate="no"/>
				<xsl:sequence select="'altova:no-value'"/>
			</xsl:when>
			<xsl:when test="$bValuesInCategory">
				<xsl:sequence select="xs:string($nodeCategoryLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="xs:string($nodeSeriesLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GetChartLabelForPos" as="xs:string">
		<xsl:param name="nodeParam" as="node()"/>
		<xsl:value-of select="string-join($nodeParam/ancestor-or-self::altova:Pos/@altova:sLabel, ' ')"/>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-pixel" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="substring-before($normLength, 'px')"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * $altova:nPxPerIn"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * $altova:nPxPerIn div 2.54"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'mm')) * $altova:nPxPerIn div 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * $altova:nPxPerIn div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * $altova:nPxPerIn div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$normLength"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-mm" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'px')) div $altova:nPxPerIn * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * 10"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="substring-before($normLength, 'mm') "/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * 25.4 div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * 25.4 div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="number($normLength) div $altova:nPxPerIn * 25.4"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
</xsl:stylesheet>
